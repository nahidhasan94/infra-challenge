version: '3.8'

services:
  postgres:
    container_name: postgres
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: testdbpass
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    user: postgres
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "sh -c 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}'"
        ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - service-network
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped

  service1:
    container_name: orders-api
    build:
      context: ./orders
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
      PGHOST: postgres
      PGUSER: postgres
      PGPASSWORD: testdbpass
      PGDATABASE: postgres
    expose:
      - "3000"
    depends_on:
      postgres:
        condition: service_healthy
    restart: on-failure
    networks:
      - service-network

  service2:
    container_name: products-api
    build:
      context: ./products
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
      PGHOST: postgres
      PGUSER: postgres
      PGPASSWORD: testdbpass
      PGDATABASE: postgres
    expose:
      - "4000"
    depends_on:
      postgres:
        condition: service_healthy
    restart: on-failure
    networks:
      - service-network

  service3:
    container_name: user-api
    build:
      context: ./user
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
      PGHOST: postgres
      PGUSER: postgres
      PGPASSWORD: testdbpass
      PGDATABASE: postgres
    expose:
      - "5000"
    depends_on:
      postgres:
        condition: service_healthy
    restart: on-failure
    networks:
      - service-network

  reverse-proxy:
    container_name: reverse-proxy
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "3000:3000"
      - "4000:4000"
      - "5000:5000"
    depends_on:
      - service1
      - service2
      - service3
    networks:
      - service-network

networks:
  service-network:
    driver: bridge

volumes:
  postgres-data: